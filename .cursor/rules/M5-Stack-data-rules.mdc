---
description: 
globs: 
alwaysApply: false
---
# M5StickCPlus2 センサーデータ送信システム 技術仕様書

## 1. システム概要

本システムはM5StickCPlus2を使用して、内蔵IMUセンサーから6軸（加速度3軸＋ジャイロ3軸）データを取得し、Bluetooth Low Energy（BLE）経由でスマートフォンアプリに送信するためのものです。主に歩行解析やモーションキャプチャに利用することを想定しています。

## 2. ハードウェア仕様

### 2.1. M5StickCPlus2 基本スペック
- **プロセッサ**: ESP32-PICO-D4（デュアルコア、240MHz）
- **メモリ**: 4MB Flash、520KB SRAM
- **ディスプレイ**: 1.14インチ LCD（135×240ピクセル）
- **電源**: 内蔵120mAhリチウムイオンバッテリー
- **充電**: USB Type-C
- **サイズ**: 48.2×25.5×13.7mm
- **重量**: 約20g

### 2.2. 使用センサー
- **IMUセンサー**: BMI270（Bosch製）
- **加速度センサー**:
  - 測定範囲: ±2g / ±4g / ±8g / ±16g（プログラム設定可能）
  - 分解能: 16ビット
  - データレート: 最大1600Hz（デフォルト: 100Hz）
- **ジャイロスコープ**:
  - 測定範囲: ±125°/s / ±250°/s / ±500°/s / ±1000°/s / ±2000°/s
  - 分解能: 16ビット
  - データレート: 最大6400Hz（デフォルト: 100Hz）

### 2.3. 入出力
- **ボタン**: 2つ（A/B）
- **Grove互換コネクタ**: I2C/GPIO拡張用
- **LED**: 1個（赤）
- **スピーカー**: 内蔵

### 2.4. 通信
- **Bluetooth**: Bluetooth 4.2 + BLE（ESP32内蔵）
- **Wi-Fi**: 2.4GHz（ESP32内蔵、本アプリケーションでは未使用）
- **USB**: Type-C（シリアル通信、プログラミング、充電用）

## 3. ソフトウェア構成

### 3.1. 開発環境
- **IDE**: Arduino IDE または PlatformIO
- **言語**: C++（Arduino Framework）
- **ライブラリ**:
  - M5StickCPlus2: デバイス基本制御用
  - ArduinoJson: JSON形式データ生成用
  - BLE関連ライブラリ: BLEDevice, BLEServer, BLEUtils, BLE2902

### 3.2. ファイル構成
```
sketch_apr2a/
├── sketch_apr2a.ino      # メインプログラムファイル
└── platformio.ini        # PlatformIO使用時の設定ファイル
```

### 3.3. メイン機能モジュール
1. **IMUデータ取得**:
   - センサー初期化
   - 生データ読み取り
   - サンプリングレート管理

2. **BLE通信**:
   - BLEサーバー初期化
   - サービス・キャラクタリスティック設定
   - データ送信

3. **ユーザーインターフェース**:
   - ディスプレイ表示
   - ボタン操作処理
   - ステータス表示

4. **電力管理**:
   - サンプリングレート最適化
   - 不要な処理の省略

## 4. BLE通信仕様

### 4.1. BLE設定
- **デバイス名**: "M5StickIMU"
- **サービスUUID**: "4fafc201-1fb5-459e-8fcc-c5c9c331914b"
- **キャラクタリスティックUUID**: "beb5483e-36e1-4688-b7f5-ea07361b26a8"
- **プロパティ**: READ, WRITE, NOTIFY
- **接続モード**: ペリフェラル（M5StickCPlus2）← セントラル（スマートフォン）

### 4.2. データ形式
- **フォーマット**: JSON文字列
- **エンコーディング**: UTF-8
- **サンプル**:
```json
{
  "device": "M5StickIMU",
  "timestamp": 1234567890,
  "type": "imu",
  "data": {
    "accX": 0.123,
    "accY": -0.456,
    "accZ": 0.789,
    "gyroX": 1.234,
    "gyroY": -2.345,
    "gyroZ": 3.456
  }
}
```

### 4.3. 通信パラメータ
- **送信間隔**: 20ms（50Hz） - `SEND_INTERVAL`で設定可能
- **実際のデータレート**: 50-100Hz（M5StickのIMUサンプリングレートに依存）
- **送信サイズ**: 約150-200バイト/パケット
- **帯域幅使用**: 約10KB/秒

## 5. パフォーマンス特性

### 5.1. サンプリングレート
- **理論上最大**: 約500Hz（ESP32およびIMUの性能上限）
- **実用的最大**: 約100Hz（BLE帯域幅と処理負荷を考慮）
- **推奨設定**: 50-100Hz（歩行解析に十分）
- **実測値**: コンソール出力の「FPS」値で確認可能

### 5.2. バッテリー持続時間
- **連続使用**: 約2-3時間（サンプリングレートに依存）
- **バッテリー容量**: 120mAh
- **充電時間**: 約1時間（USB Type-C接続）

### 5.3. 適用限界
- **BLE範囲**: 約10m（障害物なし）、約5m（一般的な屋内環境）
- **サンプル同期**: タイムスタンプによる事後処理が必要
- **環境条件**: 温度0-40℃、湿度20-80%（結露なきこと）

## 6. 操作方法

### 6.1. 基本操作
- **電源ON**: 電源ボタン（側面）を2秒長押し
- **電源OFF**: 電源ボタン（側面）を6秒長押し
- **リセット**: 電源ボタンを短く押す

### 6.2. ボタン操作
- **Aボタン**: データ送信ON/OFF切替
- **Bボタン**: システム情報表示（シリアルコンソールに出力）

### 6.3. シリアルコマンド
- **'s'/'S'**: データ送信ON/OFF切替
- **'r'/'R'**: 現在のサンプリングレート表示

### 6.4. ディスプレイ表示
- **ヘッダー**: "IMU Sender"
- **通信状態**: 
  - "Rate: XX.X Hz" - 現在のサンプリングレート
  - "BLE: ON/OFF" - BLE接続状態
  - "Send: ON/OFF" - データ送信状態
- **センサーデータ**: 
  - 加速度・ジャイロ値をリアルタイム表示
- **操作ガイド**:
  - "A:Toggle Send B:Info"

## 7. プログラミング参考情報

### 7.1. 重要な定数・設定値
- **SEND_INTERVAL**: データ送信間隔（ms）- デフォルト20ms（50Hz）
- **BLE_DEVICE_NAME**: Bluetooth表示名 - デフォルト"M5StickIMU"
- **SERVICE_UUID/CHARACTERISTIC_UUID**: BLE識別子

### 7.2. センサーデータ処理
- 取得関数: `StickCP2.Imu.getAccelData()`, `StickCP2.Imu.getGyroData()`
- 更新確認: `StickCP2.Imu.update()`
- 単位: 加速度はG（9.8m/s²）、ジャイロはdeg/s（度/秒）

### 7.3. メインループ内の処理順序
1. ボタン状態更新 (`M5.update()`)
2. IMUデータ取得
3. データ処理・BLE送信
4. 画面表示更新
5. 遅延処理（サンプリングレート維持）

## 8. トラブルシューティング

### 8.1. 一般的な問題
- **起動しない**: 充電不足の可能性、充電後に再試行
- **IMU初期化失敗**: デバイスの再起動で解決することが多い
- **BLE接続できない**: デバイス再起動、またはスマートフォンのBluetooth再起動

### 8.2. 開発時の注意点
- **書き込みエラー**: USB接続の確認、ドライバインストール確認
- **シリアルポート競合**: Arduino IDEのシリアルモニタを閉じてから書き込み
- **メモリ不足**: JSONバッファサイズ最適化（現在のコードでは問題なし）

### 8.3. パフォーマンス最適化
- SEND_INTERVALを調整（小さくすると送信頻度上昇、バッテリー消費増加）
- ディスプレイ更新頻度調整（現在250ms毎）
- 不要なシリアル出力を削減