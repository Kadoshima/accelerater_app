---
description: 
globs: 
alwaysApply: false
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to

# 歩行分析アプリ Flutter側 要件定義

## 1. プロジェクト概要

### 1.1. 目的
M5StickCPlus2から送信される6軸センサーデータ（加速度・ジャイロ）をBLE経由で受信し、歩行パターンを解析するアプリケーションを開発する。ユーザーの歩行リズムに基づいて音楽のテンポを調整し、リハビリテーションや歩行トレーニングを支援する。

### 1.2. 主要機能
- M5StickCPlus2との接続・データ受信
- リアルタイム歩行解析
- 歩行リズムに合わせた音楽テンポ調整
- 歩行データの記録と分析
- ユーザープロファイル管理

### 1.3. ターゲットプラットフォーム
- Android (8.0以上)
- iOS (14.0以上)

## 2. BLE接続・データ受信機能

### 2.1. デバイス検出・接続
- デバイス名「M5StickIMU」のスキャン
- サービスUUID: 4fafc201-1fb5-459e-8fcc-c5c9c331914b
- キャラクタリスティックUUID: beb5483e-36e1-4688-b7f5-ea07361b26a8
- 接続状態の管理（接続中、切断、再接続試行）
- デバイスとの接続状態をUI上で明示

### 2.2. データ受信処理
- JSON形式データの受信とパース
- 受信データ形式:
```json
{
  "device": "M5StickIMU",
  "timestamp": 1234567890,
  "type": "imu",
  "data": {
    "accX": 0.123,
    "accY": -0.456,
    "accZ": 0.789,
    "gyroX": 1.234,
    "gyroY": -2.345,
    "gyroZ": 3.456
  }
}
```
- データの前処理（ノイズフィルタリング、異常値排除）
- サンプリングレート管理（50Hz以上のデータ処理）

## 3. 歩行解析機能

### 3.1. 歩行検出アルゴリズム
- 加速度データからのピーク・谷検出
- 歩行ステップの特定
- 歩行リズム（BPM）の計算
- 歩行パターンの分類（正常歩行、非対称歩行など）
- ステップ間隔の変動分析

### 3.2. リアルタイム分析
- 歩行テンポ（BPM）のリアルタイム計算
- 歩行の安定性スコア算出
- 左右対称性の評価
- 歩行パターン変化の検出
- 疲労度の推定

### 3.3. データ可視化
- 加速度・ジャイロセンサーの波形表示
- 歩行リズムのリアルタイムグラフ
- 歩行メトリクスのダッシュボード表示
- 分析結果の視覚的表現

## 4. 音楽プレイヤー機能

### 4.1. 基本再生機能
- ローカル音楽ファイルの読み込み
- 基本操作（再生、一時停止、停止、前へ、次へ）
- プレイリスト管理
- 楽曲メタデータ表示

### 4.2. BPM検出・テンポ調整
- 楽曲のBPM自動検出
- 歩行BPMに基づくテンポ調整
- ピッチ保持型テンポ変更（Time Stretching）
- スムーズなテンポ変化（急激な変化を防止）

### 4.3. リズム誘導機能
- 目標BPMへの段階的誘導
- メトロノーム機能（視覚・聴覚フィードバック）
- カスタマイズ可能なリズムパターン
- 適応型テンポ調整（ユーザーの反応に基づく）

## 5. データ管理・分析機能

### 5.1. セッション記録
- 歩行データのリアルタイム記録
- セッション情報（日時、場所、目的）の管理
- 生データおよび分析結果の保存
- セッションへのメモ・タグ付け

### 5.2. 統計分析
- セッション比較（日々の変化）
- 長期的な歩行パターン分析
- 統計レポート生成
- 目標達成度の追跡

### 5.3. データエクスポート
- CSVまたはJSON形式でのエクスポート
- 専門家との共有機能
- バックアップとリストア
- クラウド同期（オプション）

## 6. ユーザーインターフェース要件

### 6.1. メイン画面レイアウト
- 上部: 接続状態、現在のBPM、セッション時間
- 中央: メインコンテンツ（波形/グラフ/プレイヤー）
- 下部: コントロールバー（接続/再生/停止等）
- サイドメニュー: 設定、履歴、分析へのアクセス

### 6.2. データ可視化コンポーネント
- リアルタイム加速度波形グラフ
- 歩行BPMトレンドグラフ
- ステップ検出マーカー
- センサー3D可視化（オプション）

### 6.3. 音楽プレイヤーUI
- 現在再生中の楽曲情報
- テンポ調整スライダー
- プレイリスト表示
- 歩行BPMと楽曲BPMの視覚的比較

### 6.4. レスポンシブデザイン
- スマートフォン縦向き最適化
- タブレット対応レイアウト（オプション）
- ダークモード対応
- アクセシビリティ考慮

## 7. 非機能要件

### 7.1. パフォーマンス
- 50Hz以上のデータサンプリングに対応
- UI更新の遅延10ms以下
- バッテリー消費の最適化
- バックグラウンド処理の効率化

### 7.2. セキュリティ
- センシティブデータの暗号化
- ユーザー認証（オプション）
- データアクセスコントロール
- セキュアなBLE実装

### 7.3. 信頼性
- BLE接続断の自動回復
- データ損失防止メカニズム
- エラー状態からの適切な回復
- 異常時のユーザー通知

### 7.4. 拡張性
- 複数センサーデバイスのサポート
- 新しい分析アルゴリズムの追加容易性
- プラグイン型アーキテクチャ（オプション）
- サードパーティ統合の可能性

## 8. 開発工程と優先順位

### 8.1. フェーズ1: 基本機能実装
1. BLE接続とデータ受信機能
2. 基本的なUI構築
3. シンプルな歩行検出実装
4. 基本的な音楽再生機能

### 8.2. フェーズ2: 核機能充実
1. 高度な歩行解析アルゴリズム
2. テンポ調整機能
3. データ記録と履歴機能
4. 拡張UI/UXの実装

### 8.3. フェーズ3: 拡張機能
1. 詳細な統計分析
2. データエクスポート
3. ユーザープロファイル
4. カスタマイズオプション